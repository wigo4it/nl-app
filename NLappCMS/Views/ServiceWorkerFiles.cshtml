@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using System.Web.Configuration
@using Newtonsoft.Json;
@using NLappCMS.Models;
@{
    Layout = null;
    Response.AddHeader("Content-Type", "application/json");

    IPublishedContent rootPage = Model.Content.Site().Children<Home>().FirstOrDefault();

    var requestUrlBase = Request.Url.GetLeftPart(UriPartial.Authority);
    var requestPathParts = Request.Url.PathAndQuery.Split('/');
    var requestUrl = requestUrlBase + string.Join("/", requestPathParts.Take(requestPathParts.Length - 1));

    Func<string, string, string> formatUrl = (url, requestedUrl) =>
    {
        var uri = new Uri(url);
        var uriPathParts = uri.PathAndQuery.Split('/');

        url = requestedUrl;

        if (uriPathParts.Length > 3)
        {
            url = requestedUrl + "/" + string.Join("/", uriPathParts.Skip(3));
        }

        return url;
    };

    Func<IEnumerable<IPublishedContent>, string, IEnumerable<string>> getPageUrls = null;
    getPageUrls = (childPages, urlRequested) =>
    {
        var pageUrls = new List<string>();

        foreach (IPublishedContent item in childPages.Where(x => x.IsVisible()
                        && !x.DocumentTypeAlias.ToUpper().StartsWith("INFOPAGINA")
                        && !x.DocumentTypeAlias.ToUpper().Equals("SEARCH")))
        {
            if (item.HasValue("excludeFromSitemap") && (bool) item.GetPropertyValue("excludeFromSitemap"))
            {
                continue;
            }

            pageUrls.Add(formatUrl(item.UrlWithDomain(), urlRequested));

            if (item.Children.Any(x => x.IsVisible()))
            {
                pageUrls.AddRange(getPageUrls(item.Children, urlRequested));
            }
        }

        return pageUrls;
    };

    Func<List<string>> getImageUrls = () => new List<string>(new []
    {
        // Note: All commented images are not used from css, or are included directly in the view on the server

        // imgs
        "/img/addtohome.svg",
        "/img/appinstalled.svg",
        //"/img/arrowright.svg",
        "/img/back.svg",
        "/img/back_light.svg",
        "/img/check.svg",
        //"/img/check_light.svg",
        "/img/close-focus.svg",
        "/img/close.svg",
        "/img/close_light.svg",
        //"/img/done.svg",
        "/img/download.svg",
        "/img/forward.svg",
        "/img/forward_light.svg",
        //"/img/header_dark.svg",
        //"/img/header_light.svg",
        "/img/home.svg",
        "/img/lang.svg",
        //"/img/lang_light.svg",
        "/img/left.svg",
        "/img/link.svg",
        //"/img/logo.svg",
        //"/img/map.svg",
        "/img/menu-focus.svg",
        //"/img/menu-light.svg",
        "/img/menu.svg",
        "/img/offline-status.svg",
        "/img/online-status.svg",
        //"/img/pdf.svg",
        "/img/place.svg",
        //"/img/place_light.svg",
        //"/img/right-white.svg",
        "/img/right.svg",
        "/img/search.svg",
        "/img/search_light.svg",
        //"/img/share.svg",
        "/img/up-focus.svg",
        "/img/up.svg",
        "/img/video.svg",
        // category imgs
        "/img/cat/cat-1.svg",
        "/img/cat/cat-1_home.svg",
        "/img/cat/cat-2.svg",
        "/img/cat/cat-2_home.svg",
        "/img/cat/cat-3.svg",
        "/img/cat/cat-3_home.svg",
        "/img/cat/cat-4.svg",
        "/img/cat/cat-4_home.svg",
        "/img/cat/cat-5.svg",
        "/img/cat/cat-5_home.svg",
        "/img/cat/cat-6.svg",
        "/img/cat/cat-6_home.svg",
    });

    Func<string, List<string>> getScriptAndStyleUrls = (version) => new List<string>(new []
    {
        // css - versioned
        "/css/nlapp.min.css?v=" + version,
        // js - versioned
        "/scripts/jquery-3.3.1.min.js?v=" + version,
        "/scripts/nlapp.min.js?v=" + version,
        "/scripts/nlapp-bundle.js?v=" + version,
        // js - not versioned
        "/scripts/offline.min.js",
    });

    Func<IEnumerable<string>, int> getHashCodeOfList = null;
    getHashCodeOfList = (list) =>
    {
        List<int> codes = new List<int>();
        foreach (string item in list)
        {
            codes.Add(item.GetHashCode());
        }

        codes.Sort();
        int hash = 0;
        foreach (int code in codes)
        {
            unchecked
            {
                hash *= 251; // multiply by a prime number
                hash += code; // add next hash code
            }
        }
        return hash;
    };

    Func<IPublishedContent, string, IEnumerable<string>> getPageUrlsWithHash = null;
    getPageUrlsWithHash = (root, urlRequested) =>
    {
        var result = new List<string>() { root.UrlWithDomain() };
        result.AddRange(getPageUrls(rootPage.Children, urlRequested).Distinct());
        result.AddRange(getImageUrls().Select(u => requestUrlBase + u));
        result.AddRange(getScriptAndStyleUrls(WebConfigurationManager.AppSettings["nlapp-version"]).Select(u => requestUrlBase + u));

        int hashCode = getHashCodeOfList(result);

        result.Insert(0, hashCode.ToString());

        return result;
    };
}
@Html.Raw(JsonConvert.SerializeObject(getPageUrlsWithHash(rootPage, requestUrl)))
