@using System.Web.Configuration
@using ContentModels = NLappCMS.Models;
@using Umbraco.Web;

@model NLappCMS.Models.Instellingen
@{
    var umbracoHelper = new UmbracoHelper(Model.Context);
    var townHomePages = Model.Root.Children<ContentModels.Home>().Where(x => x.IsVisible());
    var languages = ApplicationContext.Current.Services.LocalizationService.GetAllLanguages().ToList();

    Func<string, string, string> HomeUrl = (string language, string town) =>
    {
        return string.Format("/{0}/{1}", language, town);
    };

    Func<IPublishedContent, string, string> TownName = (IPublishedContent town, string language) =>
    {
        var allTownNames = (town as NLappCMS.Models.Home).TownNamesAll;

        var hasTownName = allTownNames != null && allTownNames.Where(x => x.Key == language).Any();

        var townName = string.Empty;
        if (hasTownName)
        {
            townName = allTownNames.FirstOrDefault(x => x.Key == language).Value.ToString();
        }
        else if (allTownNames != null)
        {
            townName = allTownNames.First().Value.ToString();
        }

        return townName;
    };

    Func<string, string> LanguageName = (string isoCode) =>
    {
        var language = @Model.LanguageLabels.FirstOrDefault(x => x.Language.IsoCode.Equals(isoCode));
        return language == null || string.IsNullOrWhiteSpace(language.Value) ? isoCode : language.Value;
    };

    Func<string, bool> IsActiveLanguage = (string isoCode) =>
    {
        string activeLanguagesSetting = WebConfigurationManager.AppSettings["nlapp-active-languages"];
        if (string.IsNullOrEmpty(activeLanguagesSetting))
        {
            return false;
        }

        var activeLangs = activeLanguagesSetting.ToLower().Split(';');
        return activeLangs.Contains(isoCode.ToLower());
    };


    var activeLanguages = languages.Where(l => IsActiveLanguage(l.IsoCode));
}

<div id="language" role="list" aria-hidden="false" aria-label="@umbracoHelper.GetDictionaryValue("SelecteerTaal")">
    <div class="content">
        @foreach (var language in activeLanguages.OrderBy(t => t.IsoCode.ToLower() == "nl-nl" ? 1 : 2))
        {
            <button name="btn-@language.Id" type="button" role="listitem" data-language="@language.IsoCode">
                @LanguageName(language.IsoCode)
            </button>
        }
    </div>
</div>

<div id="town" role="list" aria-hidden="true" aria-label="@umbracoHelper.GetDictionaryValue("SelecteerGemeente")">
    <div class="content">
        @foreach (var language in activeLanguages)
        {
            <div class="lang @language.IsoCode" aria-hidden="true">

                @foreach (var town in townHomePages.OrderBy(c => c.Name))
                {
                    <a href="@HomeUrl(language.IsoCode, town.Name.Replace(" ","-"))"
                       class="btn"
                       data-language="@language.IsoCode"
                       data-town="@town.Name"
                       data-geo-x="@town.SplashLocatieX"
                       data-geo-y="@town.SplashLocatieY">
                        @TownName(town, language.IsoCode)
                    </a>
                }
            </div>
        }
    </div>
</div>
